import unittest
import sys
import numpy as np
from typing import List
from linear_frame_element import LinearFrameElement

class TestLinearFrameElement(unittest.TestCase):

    def setUp(self):
        """Set up for test methods."""
        self.tolerance = 1e-2
        np.set_printoptions(precision=2, suppress=True)
        
    def test_simple_horizontal_frame(self):
        """Test case for a simple horizontal frame."""
        imported_data = {
            'nodes': {
                1: {'X': 0.0, 'Y': 0.0, 'Z': 0.0},
                2: {'X': 1.0, 'Y': 0.0, 'Z': 0.0}, 
            },
            'elements': {
                1: {
                    'node1': 1, 'node2': 2,
                    'E': 1, 'G': 1,
                    'A': 1, 'J': 1,
                    'Iy': 1, 'Iz': 1
                },
            }
        }
        solver = LinearFrameElement(imported_data)
        K_global_expected = np.array([
            [1.000,  0.000,  0.000,  0.000,  0.000,  0.000, -1.000,  0.000,  0.000,  0.000,  0.000,  0.000],
            [0.000, 12.000,  0.000,  0.000,  0.000,  6.000,  0.000, -12.000,  0.000,  0.000,  0.000,  6.000],
            [0.000,  0.000, 12.000,  0.000, -6.000,  0.000,  0.000,  0.000, -12.000,  0.000, -6.000,  0.000],
            [0.000,  0.000,  0.000,  1.000,  0.000,  0.000,  0.000,  0.000,  0.000, -1.000,  0.000,  0.000],
            [0.000,  0.000, -6.000,  0.000,  4.000,  0.000,  0.000,  0.000,  6.000,  0.000,  2.000,  0.000],
            [0.000,  6.000,  0.000,  0.000,  0.000,  4.000,  0.000, -6.000,  0.000,  0.000,  0.000,  2.000],
            [-1.000,  0.000,  0.000,  0.000,  0.000,  0.000,  1.000,  0.000,  0.000,  0.000,  0.000,  0.000],
            [0.000, -12.000,  0.000,  0.000,  0.000, -6.000,  0.000, 12.000,  0.000,  0.000,  0.000, -6.000],
            [0.000,  0.000, -12.000,  0.000,  6.000,  0.000,  0.000,  0.000, 12.000,  0.000,  6.000,  0.000],
            [0.000,  0.000,  0.000, -1.000,  0.000,  0.000,  0.000,  0.000,  0.000,  1.000,  0.000,  0.000],
            [0.000,  0.000, -6.000,  0.000,  2.000,  0.000,  0.000,  0.000,  6.000,  0.000,  4.000,  0.000],
            [0.000,  6.000,  0.000,  0.000,  0.000,  2.000,  0.000, -6.000,  0.000,  0.000,  0.000,  4.000]
        ])        
        K_global_actual = solver.assemble_global_stiffness()
        np.testing.assert_allclose(K_global_actual, K_global_expected, atol=self.tolerance)

    def test_3d_frame_example_5_8(self):
        """Test case for a 3D frame (Ex 5.8, p287)."""
        imported_data = {
            'nodes': {
                1: {'X': 2.5, 'Y': 0.0, 'Z': 0.0},
                2: {'X': 0.0, 'Y': 0.0, 'Z': 0.0},
                3: {'X': 2.5, 'Y': 0.0, 'Z': -2.5},
                4: {'X': 2.5, 'Y': -2.5, 'Z': 0.0},
            },
            'elements': {
                1: {
                    'node1': 2, 'node2': 1,
                    'E': 200e3, 'G': 60e3,
                    'A': 6.25E-3, 'J': 20e-6,
                    'Iy': 40e-6, 'Iz': 40e-6
                },
                2: {
                    'node1': 3, 'node2': 1,
                    'E': 200e3, 'G': 60e3,
                    'A': 6.25E-3, 'J': 20e-6,
                    'Iy': 40e-6, 'Iz': 40e-6
                },
                3: {
                    'node1': 4, 'node2': 1,
                    'E': 200e3, 'G': 60e3,
                    'A': 6.25E-3, 'J': 20e-6,
                    'Iy': 40e-6, 'Iz': 40e-6
                },
            }
        }
        solver = LinearFrameElement(imported_data)
        K_global_actual = solver.assemble_global_stiffness()
        # Expected global stiffness matrix (calculated manually or from a reliable source)

        # Local Stiffness Matrix k1
        k1 = np.array([
            [500.000,   0.000,   0.000,   0.000,   0.000,   0.000, -500.000,   0.000,   0.000,   0.000,   0.000,   0.000],
            [  0.000,   6.144,   0.000,   0.000,   0.000,   7.680,    0.000,  -6.144,   0.000,   0.000,   0.000,   7.680],
            [  0.000,   0.000,   6.144,   0.000,  -7.680,   0.000,    0.000,   0.000,  -6.144,   0.000,  -7.680,   0.000],
            [  0.000,   0.000,   0.000,   0.480,   0.000,   0.000,    0.000,   0.000,   0.000,  -0.480,   0.000,   0.000],
            [  0.000,   0.000,  -7.680,   0.000,  12.800,   0.000,    0.000,   0.000,   7.680,   0.000,   6.400,   0.000],
            [  0.000,   7.680,   0.000,   0.000,   0.000,  12.800,    0.000,  -7.680,   0.000,   0.000,   0.000,   6.400],
            [-500.000,   0.000,   0.000,   0.000,   0.000,   0.000,  500.000,   0.000,   0.000,   0.000,   0.000,   0.000],
            [  0.000,  -6.144,   0.000,   0.000,   0.000,  -7.680,    0.000,   6.144,   0.000,   0.000,   0.000,  -7.680],
            [  0.000,   0.000,  -6.144,   0.000,   7.680,   0.000,    0.000,   0.000,   6.144,   0.000,   7.680,   0.000],
            [  0.000,   0.000,   0.000,  -0.480,   0.000,   0.000,    0.000,   0.000,   0.000,   0.480,   0.000,   0.000],
            [  0.000,   0.000,  -7.680,   0.000,   6.400,   0.000,    0.000,   0.000,   7.680,   0.000,  12.800,   0.000],
            [  0.000,   7.680,   0.000,   0.000,   0.000,   6.400,    0.000,  -7.680,   0.000,   0.000,   0.000,  12.800]
        ])

        # Local Stiffness Matrix k2
        k2 = np.array([
            [  6.144,   0.000,   0.000,   0.000,   7.680,   0.000,  -6.144,   0.000,   0.000,   0.000,   7.680,   0.000],
            [  0.000,   6.144,   0.000,  -7.680,   0.000,   0.000,    0.000,  -6.144,   0.000,  -7.680,   0.000,   0.000],
            [  0.000,   0.000, 500.000,   0.000,   0.000,   0.000,    0.000,   0.000, -500.000,   0.000,   0.000,   0.000],
            [  0.000,  -7.680,   0.000,  12.800,   0.000,   0.000,    0.000,   7.680,   0.000,   6.400,   0.000,   0.000],
            [  7.680,   0.000,   0.000,   0.000,  12.800,   0.000,   -7.680,   0.000,   0.000,   0.000,   6.400,   0.000],
            [  0.000,   0.000,   0.000,   0.000,   0.000,   0.480,    0.000,   0.000,   0.000,   0.000,   0.000,  -0.480],
            [ -6.144,   0.000,   0.000,   0.000,  -7.680,   0.000,    6.144,   0.000,   0.000,   0.000,  -7.680,   0.000],
            [  0.000,  -6.144,   0.000,   7.680,   0.000,   0.000,    0.000,   6.144,   0.000,   7.680,   0.000,   0.000],
            [  0.000,   0.000, -500.000,   0.000,   0.000,   0.000,    0.000,   0.000,  500.000,   0.000,   0.000,   0.000],
            [  0.000,  -7.680,   0.000,   6.400,   0.000,   0.000,    0.000,   7.680,   0.000,  12.800,   0.000,   0.000],
            [  7.680,   0.000,   0.000,   0.000,   6.400,   0.000,   -7.680,   0.000,   0.000,   0.000,  12.800,   0.000],
            [  0.000,   0.000,   0.000,   0.000,   0.000,  -0.480,    0.000,   0.000,   0.000,   0.000,   0.000,   0.480]
        ])

        # Local Stiffness Matrix k3
        k3 = np.array([
            [  6.144,   0.000,   0.000,   0.000,   0.000,  -7.680,  -6.144,   0.000,   0.000,   0.000,   0.000,  -7.680],
            [  0.000, 500.000,   0.000,   0.000,   0.000,   0.000,    0.000, -500.000,   0.000,   0.000,   0.000,   0.000],
            [  0.000,   0.000,   6.144,   7.680,   0.000,   0.000,    0.000,   0.000,  -6.144,   7.680,   0.000,   0.000],
            [  0.000,   0.000,   7.680,  12.800,   0.000,   0.000,    0.000,   0.000,  -7.680,   6.400,   0.000,   0.000],
            [  0.000,   0.000,   0.000,   0.000,   0.480,   0.000,    0.000,   0.000,   0.000,   0.000,  -0.480,   0.000],
            [ -7.680,   0.000,   0.000,   0.000,   0.000,  12.800,    7.680,   0.000,   0.000,   0.000,   0.000,   6.400],
            [ -6.144,   0.000,   0.000,   0.000,   0.000,   7.680,    6.144,   0.000,   0.000,   0.000,   0.000,   7.680],
            [  0.000, -500.000,   0.000,   0.000,   0.000,   0.000,    0.000,  500.000,   0.000,   0.000,   0.000,   0.000],
            [  0.000,   0.000,  -6.144,  -7.680,   0.000,   0.000,    0.000,   0.000,   6.144,  -7.680,   0.000,   0.000],
            [  0.000,   0.000,   7.680,   6.400,   0.000,   0.000,    0.000,   0.000,  -7.680,  12.800,   0.000,   0.000],
            [  0.000,   0.000,   0.000,   0.000,  -0.480,   0.000,    0.000,   0.000,   0.000,   0.000,   0.480,   0.000],
            [ -7.680,   0.000,   0.000,   0.000,   0.000,   6.400,    7.680,   0.000,   0.000,   0.000,   0.000,  12.800]
        ])

        def get_dof_map(node1: int, node2: int) -> List[int]:
            return [6 * (node1 - 1) + i for i in range(6)] + [6 * (node2 - 1) + i for i in range(6)]

        K_global_expected = np.zeros((24, 24))  # 4 nodes Ã— 6 DOFs = 24 DOFs

        element_dof_maps = [
            get_dof_map(2, 1),  # element 1
            get_dof_map(3, 1),  # element 2
            get_dof_map(4, 1),  # element 3
        ]

        local_stiffness_matrices = [k1, k2, k3]

        for k_local, dof_map in zip(local_stiffness_matrices, element_dof_maps):
            for i in range(12):
                for j in range(12):
                    K_global_expected[dof_map[i], dof_map[j]] += k_local[i, j]

        
        np.testing.assert_allclose(K_global_actual, K_global_expected,  rtol=1e-2)

if __name__ == '__main__':
    sys.stdout = sys.__stdout__ 
    unittest.main(verbosity=2)